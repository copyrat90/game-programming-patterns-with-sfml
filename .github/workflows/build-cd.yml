# Copyright (c) 2020-2021 Luca Cappa
# Released under the term specified in file https://github.com/lukka/CppBuildTasks-Validation/blob/v10/README.md
# SPDX short identifier: MIT
#
# The peculiarity of this workflow is that assumes vcpkg is NOT stored as a submodule of this repository.
# This workflow does the following:
# - Restores vcpkg artifacts from cache.
# - Using the provided Git commit id, sets up vcpkg if needed, then run CMake with CMakePreset.json using a configuration
#   that leverages the vcpkg's toolchain file. This will automatically run vcpkg to install dependencies
#   described by the vcpkg.json manifest file. It will be a no-op if those are restored from cache.
# - Finally builds the sources with Ninja.

# Edited by copyrat90:
# This workflow runs when a GitHub Release is published.
# It automatically adds binary releases for the Windows, Mac OS and Linux.

name: build-cd
on:
  release:
    types: [published]

jobs:
  job:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            vcpkgCommitId: 'a506c84a86e5b08ee1b2c4bb0be628ded20af99d'
          - os: ubuntu-latest
            vcpkgCommitId: 'a506c84a86e5b08ee1b2c4bb0be628ded20af99d'
          - os: macos-latest
            vcpkgCommitId: 'a506c84a86e5b08ee1b2c4bb0be628ded20af99d'

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - if: matrix.os == 'ubuntu-latest'
        run: sudo apt update -y && sudo apt install -y libx11-dev libxrandr-dev libxi-dev libudev-dev libgl1-mesa-dev

      - uses: lukka/get-cmake@latest
      - name: Dump the content of $RUNNER_TEMP
        run: find $RUNNER_TEMP
        shell: bash
      - name: Dump the content of $RUNNER_WORKSPACE
        run: find $RUNNER_WORKSPACE
        shell: bash

      - name: Restore artifacts, or setup vcpkg (do not install any package)
        uses: lukka/run-vcpkg@v10
        id: runvcpkg
        with:
          # This specifies the location of vcpkg, where it is going to be restored from cache, or create from scratch.
          vcpkgDirectory: '${{ runner.workspace }}/b/vcpkg'
          # The Git commit id of vcpkg to be checked out. This is only needed because we are not using a submodule.
          vcpkgGitCommitId: '${{ matrix.vcpkgCommitId }}'
          # The vcpkg.json file, which will be part of cache key computation.
          vcpkgJsonGlob: '${{ github.workspace }}/vcpkg.json'

      - name: Prints output of run-vcpkg's action
        run: echo "root='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}', triplet='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_DEFAULT_TRIPLET_OUT }}'"

      - name: Run CMake with vcpkg.json manifest
        uses: lukka/run-cmake@v10
        with:
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          configurePreset: ninja-multi-vcpkg
          buildPreset: ninja-multi-vcpkg-release

      - name: Copy the OS-dependent README.txt
        run: cp "${{ github.workspace }}/.cd-readme/readme-${{ matrix.os }}.txt" "${{ github.workspace }}/build/ninja-multi-vcpkg/README.txt"

      - name: Zip the binaries and licenses
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          filename: 'igpp-${{ runner.os }}.zip'
          directory: '${{ github.workspace }}/build/ninja-multi-vcpkg'
          # Only include RelWithDebInfo (exclude Debug & Release)
          exclusions: 'Debug Release CMakeFiles cmake_install.cmake'
          path: |
            Patterns
            licenses
            LICENSE
            README.txt

      - name: Add the zip archive to the release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ github.workspace }}/build/ninja-multi-vcpkg/igpp-${{ runner.os }}.zip
